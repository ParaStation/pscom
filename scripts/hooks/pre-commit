#!/bin/bash
#
# ParaStation
#
# Copyright (C) 2023-2024 ParTec AG, Munich
#
# This file may be distributed under the terms of the Q Public License
# as defined in the file LICENSE.QPL included in the packaging of this
# file.

if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    echo "ERROR: HEAD is not a valid rev. Abort!"
    exit 1
fi

function usage {
    echo "usage: $PROGRAMNAME [-f <filename>] [-a] [-h]"
    echo "	-f specify the file to be checked"
    echo "	-a apply changes to current working directory"
    echo "	-h display help"
    exit 1
}


function check_diff {
    file=${1}
    tmp_file=${2}
    # Check for differences
    git --no-pager diff ${file} ${tmp_file} > $TMP_DIFF
    if [ $? != 0 ] ; then
        printf "\n================================================================================\n"
        cat ${TMP_DIFF}
        printf "================================================================================\n\n"
        return 1
    else
        return 0
    fi
}

LOCAL_MIRROR=/tmp/${USER}/pscom-tmp-mirror
TMP_FILENAME=/tmp/${USER}/pscom-tmp-file
TMP_DIFF=/tmp/${USER}/pscom-tmp-diff
CLANG_FORMAT=clang-format
CMAKE_FORMAT=cmake-format
CMAKE_LINT=cmakelint


GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Ensure formaters and linters are available
COMMANDS_TO_CHECK=(
    "${CLANG_FORMAT}"
    "${CMAKE_FORMAT}"
    "${CMAKE_LINT}"
)
for command_to_check in "${COMMANDS_TO_CHECK[@]}"; do
    if ! command -v "${command_to_check}" != 0 &> /dev/null; then
        echo -e "${RED}[ERROR]${NC} '${command_to_check}' could not be found. Abort!"
        exit 1
    fi
done


function check_format {
    format=${1}
    files=${2}

    formatter=$(echo ${format} | cut -d" " -f1)
    # Show files that are being checked
    echo "Running '${formatter}' on the following files:"
    for file in $files; do
        echo "* ${file}"
    done
    echo

    for file in $files; do
        echo -ne "Processing ${file} ... "
        cp ${file} ${TMP_FILENAME}

        ${format} ${file} 2>&1
        ret=$?
        if [[ "${formatter}" == "${CLANG_FORMAT}" ||
                ("${formatter}" == "${CMAKE_FORMAT}" && ${apply} == true) ]]; then
            # Run clang-format twice as we sometimes see idempotency
            ${format} ${file} 2>&1
            check_diff ${file} ${TMP_FILENAME}
            ret=$?
        fi

        if [ $ret != 0 ]; then
            echo -e "${RED}failed${NC}"
            return 1
        else
            echo -e "${GREEN}done${NC}"
        fi
    done
    return 0
}

apply=false
args=$(getopt haf: $*) ; errcode=$?; set -- $args

while :; do
    case "$1" in
        -h)
            usage
            exit
            ;;
        -f)
            file=${2}
            shift; shift
            ;;
        -a)
            apply=true
            shift;
            ;;
        --)
            shift; break
            ;;
    esac
done

# Only work on a copy if changes shall not be applied
if [ "${apply}" != true ]; then
    git checkout-index --prefix=$LOCAL_MIRROR/ -af

    # Remove files from MIRROR which are no longer present in the index
    git diff-index --cached --name-only --diff-filter=D -z HEAD | \
        (cd $LOCAL_MIRROR && xargs -0 rm -f --)
fi

# Either determine all files of the latest commit or take a file provided as
# first argument to this script
if [ -z ${file} ]; then
    echo -n "Determine modified files ... "
    # This will check the previous commit again when not amending a commit, but
    # that should be ok if the patches are correct.
    files_to_check=$(git diff --cached --name-only --diff-filter=ACM HEAD~1 -- bootstrap '*.h' '*.c')
    # `cmake_files_to_check` - grep the cmake files with the exclusion of the modules in the `cmake/Modules` directory.
    # Those files can be moved or reused from other projects with different formatting and then our formatting should not
    # be applied to them.
    cmake_files_to_check=$(git diff --cached --name-only --diff-filter=ACM HEAD~1 -- bootstrap '*.cmake' '*CMakeLists.txt' \
        | grep -E -v '^cmake/Modules/')
    echo -e "${GREEN}done${NC}"
else
    if [[ ($file == *.c || $file == *.h) ]]; then
        files_to_check=${file}
    elif [[ ($file == *CMakeLists.txt || $file == *.cmake) ]]; then
        cmake_files_to_check=${file}
    fi
fi


if [ "${apply}" != true ]; then
    # Everything else happens in the temporary build tree
    pushd $LOCAL_MIRROR > /dev/null
fi

ret=0

if [ ${#files_to_check} != 0 ]; then
    # Iterate all .c and .h files with clang-format
    # (This won't work if we ever have a file with a space in the name)
    cmd="${CLANG_FORMAT} -i"
    check_format "${cmd}" "${files_to_check}"
    clang_ret=$?
fi

if [ ${#cmake_files_to_check} != 0 ]; then
    # Iterate through all the cmake-specific files with cmake-format
    if [ "${apply}" != true ]; then
        # Exit with status code 0 if formatting would not change
        # file contents, or status code 1 if it would
        cmake_format_cmd="${CMAKE_FORMAT} --config=.cmakeformatrc --check"
    else
        # Write the formatted version of the file in place
        cmake_format_cmd="${CMAKE_FORMAT} --config=.cmakeformatrc --in-place"
    fi
    check_format "${cmake_format_cmd}" "${cmake_files_to_check}"
    cmake_ret=$?

    # Iterate through all the cmake-specific files with cmakelint
    cmake_format_cmd="${CMAKE_LINT} --config=.cmakelintrc --quiet"
    check_format "${cmake_format_cmd}" "${cmake_files_to_check}"
    cmakelint_ret=$?
fi

if [[ ${clang_ret} == 1 || ${cmake_ret} == 1 || ${cmakelint_ret} == 1 ]]; then
    ret=1
fi

if [ "${apply}" != true ]; then
    # Cleanup temporary files
    rm -rf ${LOCAL_MIRROR} ${TMP_FILENAME} ${TMP_DIFF}
    popd > /dev/null
fi

if [ $ret != 0 ]; then
    echo -e "${RED}== CODE CLEANUP SCRIPT FAILED ==${NC}"
    exit $ret
fi
